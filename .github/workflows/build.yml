name: publish
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - '*'
  release:
    types:
      - published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_VERSION: 9.0.x
  NUGET_DIRECTORY: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: pwsh

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run tests and collect coverage (Cobertura)
        run: |
          dotnet test src/Namotion.Interceptor.sln `
            --configuration Release `
            --results-directory ./TestResults `
            --collect:"XPlat Code Coverage" `
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Upload raw coverage file
        uses: actions/upload-artifact@v4
        with:
          name: cobertura-coverage
          path: '**/TestResults/**/coverage.cobertura.xml'
          if-no-files-found: error

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate HTML coverage report
        run: |
          reportgenerator `
            -reports:"**/TestResults/**/coverage.cobertura.xml" `
            -targetdir:"coverage-report" `
            -reporttypes:Html

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: html-coverage-report
          path: coverage-report

  benchmark:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Run benchmarks on current branch
        run: |
          dotnet run --project src/Namotion.Interceptor.Benchmark/Namotion.Interceptor.Benchmark.csproj `
            --configuration Release `
            --filter '*' `
            --exporters json html

      - name: Save current branch results
        run: |
          if (Test-Path BenchmarkDotNet.Artifacts/results) {
            New-Item -ItemType Directory -Force -Path benchmark-results-current
            Copy-Item -Path BenchmarkDotNet.Artifacts/results/* -Destination benchmark-results-current/ -Recurse
          }

      - name: Run benchmarks on base branch (if PR)
        if: github.event_name == 'pull_request'
        run: |
          # Clean previous artifacts
          if (Test-Path BenchmarkDotNet.Artifacts) {
            Remove-Item -Path BenchmarkDotNet.Artifacts -Recurse -Force
          }
          
          # Checkout base branch
          git fetch origin ${{ github.base_ref }}
          git checkout origin/${{ github.base_ref }}
          
          # Run benchmarks on base branch
          dotnet run --project src/Namotion.Interceptor.Benchmark/Namotion.Interceptor.Benchmark.csproj `
            --configuration Release `
            --filter '*' `
            --exporters json html
          
          # Save base branch results
          if (Test-Path BenchmarkDotNet.Artifacts/results) {
            New-Item -ItemType Directory -Force -Path benchmark-results-base
            Copy-Item -Path BenchmarkDotNet.Artifacts/results/* -Destination benchmark-results-base/ -Recurse
          }
          
          # Return to PR branch
          git checkout -

      - name: Compare benchmark results
        if: github.event_name == 'pull_request'
        id: compare
        run: |
          # Compare JSON results if both exist
          if ((Test-Path benchmark-results-current) -and (Test-Path benchmark-results-base)) {
            $currentFiles = Get-ChildItem -Path benchmark-results-current -Filter "*-report-full-compressed.json"
            $baseFiles = Get-ChildItem -Path benchmark-results-base -Filter "*-report-full-compressed.json"
            
            if ($currentFiles -and $baseFiles) {
              $comparison = @"
          ## 📊 Benchmark Comparison Results
          
          Benchmarks have been run on both the PR branch and the base branch (${{ github.base_ref }}).
          
          📁 **Artifacts Available:**
          - Current branch results: \`benchmark-results-current\`
          - Base branch results: \`benchmark-results-base\`
          
          ⚠️ **Note:** Detailed performance comparison requires manual analysis of the JSON/HTML reports.
          Download the artifacts to compare specific metrics like execution time, memory allocation, and GC collections.
          
          💡 **Tip:** Look for the \`*-report.html\` files for an easy-to-read comparison.
          "@
              
              # Save comparison to file
              $comparison | Out-File -FilePath comparison.md -Encoding utf8
              
              # Set output for comment
              "has_comparison=true" >> $env:GITHUB_OUTPUT
            }
          }

      - name: Comment PR with comparison
        if: github.event_name == 'pull_request' && steps.compare.outputs.has_comparison == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comparison = fs.readFileSync('comparison.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comparison
            });

      - name: Upload current branch benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-current
          path: benchmark-results-current/
          if-no-files-found: error

      - name: Upload base branch benchmark results
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-base
          path: benchmark-results-base/
          if-no-files-found: ignore

  pack:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - run: dotnet pack src/Namotion.Interceptor.sln --configuration Release --output ${{ env.NUGET_DIRECTORY }} -p:PackageVersion=${{ github.event.release.tag_name }}

      - uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NUGET_DIRECTORY }}/*.nupkg

  validate:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ pack ]
    steps:
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NUGET_DIRECTORY }}

      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      - name: Validate package
        run: meziantou.validate-nuget-package --excluded-rules IconMustBeSet,ReadmeMustBeSet,Symbols,ProjectUrlMustBeSet (Get-ChildItem "${{ env.NUGET_DIRECTORY }}/*.nupkg")

  deploy:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ validate, test ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NUGET_DIRECTORY }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NUGET_DIRECTORY }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }