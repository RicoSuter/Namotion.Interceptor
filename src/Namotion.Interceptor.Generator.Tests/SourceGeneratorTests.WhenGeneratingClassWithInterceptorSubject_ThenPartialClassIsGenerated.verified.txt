// <auto-generated>
//     This code was generated by Namotion.Interceptor.Generator
// </auto-generated>

using Namotion.Interceptor;
using Namotion.Interceptor.Interceptors;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.Frozen;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text.Json.Serialization;

#pragma warning disable CS8669
#pragma warning disable CS0649

namespace YourDefaultNamespace 
{
    public partial class SampleSubject : IInterceptorSubject
    {
        private IInterceptorExecutor? _context;
        private IReadOnlyDictionary<string, SubjectPropertyMetadata>? _properties;

        [JsonIgnore]
        IInterceptorSubjectContext IInterceptorSubject.Context => _context ??= new InterceptorExecutor(this);

        [JsonIgnore]
        ConcurrentDictionary<(string? property, string key), object?> IInterceptorSubject.Data { get; } = new();

        [JsonIgnore]
        IReadOnlyDictionary<string, SubjectPropertyMetadata> IInterceptorSubject.Properties => _properties ?? DefaultProperties;

        void IInterceptorSubject.AddProperties(params IEnumerable<SubjectPropertyMetadata> properties)
        {
            _properties = (_properties ?? DefaultProperties)
                .Concat(properties.Select(p => new KeyValuePair<string, SubjectPropertyMetadata>(p.Name, p)))
                .ToFrozenDictionary();
        }

        public static IReadOnlyDictionary<string, SubjectPropertyMetadata> DefaultProperties { get; } =
            new Dictionary<string, SubjectPropertyMetadata>
            {
                {
                    "Value",       
                    new SubjectPropertyMetadata(
                        nameof(Value), 
                        typeof(SampleSubject).GetProperty(nameof(Value)).PropertyType!, 
                        typeof(SampleSubject).GetProperty(nameof(Value)).GetCustomAttributes().ToArray()!, 
                        null, 
                        null, 
                        isIntercepted: true,
                        isDynamic: false)
                },
                {
                    "Name",       
                    new SubjectPropertyMetadata(
                        nameof(Name), 
                        typeof(SampleSubject).GetProperty(nameof(Name)).PropertyType!, 
                        typeof(SampleSubject).GetProperty(nameof(Name)).GetCustomAttributes().ToArray()!, 
                        null, 
                        null, 
                        isIntercepted: true,
                        isDynamic: false)
                },
            }
            
            .ToFrozenDictionary();

        public SampleSubject()
        {
        }

        public SampleSubject(IInterceptorSubjectContext context) : this()
        {
            ((IInterceptorSubject)this).Context.AddFallbackContext(context);
        }

        private int _Value;

        public partial int Value
        {
        }

        private string _Name;

        public partial string Name
        {
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private TProperty GetPropertyValue<TProperty>(string propertyName, Func<IInterceptorSubject, TProperty> readValue)
        {
            return _context is not null ? _context.GetPropertyValue(propertyName, readValue)! : readValue(this)!;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private void SetPropertyValue<TProperty>(string propertyName, TProperty newValue, Func<IInterceptorSubject, TProperty> readValue, Action<IInterceptorSubject, TProperty> setValue)
        {
            if (_context is null)
            {
                setValue(this, newValue);
            }
            else
            {
                _context.SetPropertyValue(propertyName, newValue, readValue, setValue);
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private object? InvokeMethod(string methodName, Func<object?[], object?> invokeMethod, params object?[] parameters)
        {
            return _context is not null ? _context.InvokeMethod(methodName, parameters, invokeMethod) : invokeMethod(parameters);
        }
    }
}
