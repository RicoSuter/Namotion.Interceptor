@page "/counter"
@rendermode InteractiveServer

@using HomeBlaze.Client.State

@inject Host Host

@inherits Namotion.Interceptor.Blazor.TrackingComponentBase<HomeBlaze.Client.State.Host>

<MudButton OnClick="Callback" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">Add Thing</MudButton>
<MudButton OnClick="Clear" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">Clear</MudButton>

<MudPaper Class="pa-4 mt-4">
    <MudText Typo="Typo.h6" Class="mb-4">Things (@(Subject?.Things.Length ?? 0))</MudText>
    
    <MudTable Items="@GetThings()" Hover="true" Striped="true" Dense="true" Elevation="0" T="Thing">
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Temperature (°C)</MudTh>
            <MudTh>Temperature (°F)</MudTh>
            <MudTh>Summary</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Date.ToString("yyyy-MM-dd")</MudTd>
            <MudTd DataLabel="Temperature (°C)">
                <MudChip T="string" Size="Size.Small" Color="@GetTemperatureColor(context.TemperatureC)">
                    @context.TemperatureC°C
                </MudChip>
            </MudTd>
            <MudTd DataLabel="Temperature (°F)">@context.TemperatureF°F</MudTd>
            <MudTd DataLabel="Summary">@(string.IsNullOrEmpty(context.Summary) ? "-" : context.Summary)</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText Typo="Typo.body2" Color="Color.Secondary">No things added yet. Click "Add Thing" to get started!</MudText>
        </NoRecordsContent>
    </MudTable>
</MudPaper>

@code {
    private void Callback()
    {
        Host.AddThing();
    }
    private void Clear()
    {
        Host.Clear();
    }

    private IEnumerable<Thing> GetThings()
    {
        return Host.Things;
    }
    
    private Color GetTemperatureColor(int temperatureC)
    {
        if (temperatureC < 0)
            return Color.Info;
        if (temperatureC < 15)
            return Color.Primary;
        if (temperatureC < 25)
            return Color.Success;
        if (temperatureC < 35)
            return Color.Warning;
        return Color.Error;
    }
}
